# Sistema de Reserva de Sala de Reunião (API)

Este projeto é uma API para gerenciamento de reservas de salas de reunião, desenvolvida em .NET 8 com MongoDB como banco de dados. A aplicação foi containerizada para ser executada em Docker, incluindo também o Mongo-Express para visualização e gerenciamento do banco de dados.

## Tecnologias Utilizadas
- .NET 8
- MongoDB
- Mongo-Express
- Docker

## Funcionalidades
- CRUD para reserva de salas de reunião (criar, visualizar, atualizar e excluir reservas)
- Visualização das reservas através de Mongo-Express

## Requisitos

- [Docker](https://www.docker.com/get-started) e [Docker Compose](https://docs.docker.com/compose/install/)

## Configuração do Ambiente

1. **Clone o repositório:**

    ```bash
    git clone https://github.com/seu-usuario/seu-repositorio.git
    cd seu-repositorio
    ```

2. **Execute o Docker Compose:**

    Este comando cria os containers para a API, MongoDB e Mongo-Express.

    ```bash
    docker-compose up -d
    ```

3. **Acessar a API:**

    A API estará disponível na URL `http://localhost:5000`.

4. **Acessar o Mongo-Express:**

    O Mongo-Express estará acessível na URL `http://localhost:8081` usando as credenciais:
    - **Usuário:** `admin`
    - **Senha:** `pass`

## Estrutura do Projeto

- **/src**: Código fonte da API.
- **/docker-compose.yml**: Arquivo para configuração dos containers Docker.
- **/README.md**: Este arquivo README.

## Endpoints da API

- **GET /api/salas**: Retorna todas as salas de reunião.
- **POST /api/salas**: Cria uma nova sala de reunião.
- **GET /api/reservas**: Retorna todas as reservas.
- **POST /api/reservas**: Cria uma nova reserva.
- **PUT /api/reservas/{id}**: Atualiza uma reserva existente.
- **DELETE /api/reservas/{id}**: Exclui uma reserva.

## Executando Testes

Para executar os testes, use o seguinte comando:

```bash
dotnet test
